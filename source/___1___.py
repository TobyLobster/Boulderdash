# Disassembler

import sys
import logging
logger = logging.getLogger(__name__)
handler = logging.StreamHandler(stream=sys.stdout)
logger.addHandler(handler)

from commands import *
import acorn

config.set_label_references(False)
config.set_hex_dump(True)
#config.set_bytes_as_ascii(False)
config.set_show_autogenerated_labels(False)
config.set_show_cpu_state(False)
config.set_show_char_literals(False)
config.set_show_all_labels(False)

# Common helper routines
def ab(addr, message=""):
    if message != "":
        message = ". "+message
    comment(addr, "ALWAYS branch" + message, inline=True)

def ri(addr, message=""):
    if message == "":
        message = "redundant instruction"
    comment(addr, message, inline=True)

unused_count = 1

def unused(addr):
    global unused_count
    label(addr, "unused"+str(unused_count))
    unused_count += 1

def unused_entry(addr):
    global unused_count
    entry(addr, "unused"+str(unused_count))
    unused_count += 1

load(0x1300, "original/___1___", "6502")

comment(0x1300, """
Caves: A-P + Four bonus caves

tile_map:
$00 = empty
$01 = earth
$02 = wall
$03 = titanium wall
$04 = diamond
$05 = rock
$06 = exit
$07 = fungus
$08 = player
$09 = 4x4 earth square with monster pacing inside
$0a = animate explosion the player
$0b = Letter D/ Vertical column of earth?
$0c = Horizontal row of earth?
$0d = rock
$0e = butterfly
$0f = player
""")


sprites = { 0x0: "sprite_space",
            0x3: "sprite_diamond",
            0x32: "sprite_0",
            0x33: "sprite_1",
            0x34: "sprite_2",
            0x35: "sprite_3",
            0x36: "sprite_4",
            0x37: "sprite_5",
            0x38: "sprite_6",
            0x39: "sprite_7",
            0x3a: "sprite_8",
            0x3b: "sprite_9",

            0x3e: "sprite_slash",
            0x3f: "sprite_comma",
}
for i in sprites:
    constant(i, sprites[i])

ranges = [(0x1ee0, 0x1ef0),
          (0x1ef3, 0x1efa),
          (0x1efb, 0x1f00),
          (0x1f32, 0x1f37),
          (0x1f38, 0x1f46),
          (0x1f4c, 0x1f52),
          (0x1f55, 0x1f56),
          (0x1f57, 0x1f5a),
          (0x3200, 0x3214),
          (0x321a, 0x3220),
          (0x3223, 0x3225),
          (0x3226, 0x323c),
          (0x3242, 0x3248),
          (0x324b, 0x324d),
          (0x324e, 0x3258),
          (0x325c, 0x3264),
          (0x3265, 0x3266),
          (0x3267, 0x3268),
          (0x3269, 0x326a),
          (0x326b, 0x326c),
          (0x326d, 0x3271),
          (0x3272, 0x3273),
          (0x3274, 0x3275),
          (0x3276, 0x3277),
          (0x3278, 0x327a),
          (0x3280, 0x3284),
          (0x328a, 0x328d),
          (0x3291, 0x3292),
          (0x3296, 0x3297),
          (0x329d, 0x32a1),
          (0x32ae, 0x32af),
          (0x32b3, 0x32b4),
          (0x32b5, 0x32b6),
          (0x32b7, 0x32b8),
          (0x32b9, 0x32bb),
          (0x32bc, 0x32bd),
          (0x32be, 0x32c1),
          (0x32c2, 0x32c3),
          (0x32c4, 0x32c5),
          (0x32c6, 0x32c7),
          (0x32cb, 0x32cc),
          (0x32d1, 0x32d3),
          (0x32d5, 0x32d6),
          (0x32dc, 0x32e4),
          (0x32e8, 0x3300),
          (0x5028, 0x502a),
          (0x5030, 0x5034),
          (0x503a, 0x503c),
          (0x506e, 0x5074),
          (0x5077, 0x5079),
          (0x507a, 0x507c),
          ]

for r in ranges:
    for i in range(r[0], r[1]):
        byte(i)
        expr(i, sprites)

addrs = [0] * 95
for i in range(0, 95):
    name  = "sprite_addr_" + str(i)
    addr = get_u8_binary(0x2000+i) + 256*get_u8_binary(0x2080+i)
    addrs[i] = addr
    label(addr, name)
    byte(0x2000+i)
    byte(0x2080+i)
    expr(0x2000+i, make_lo(name))
    expr(0x2080+i, make_hi(name))

byte(0x2061, 0x2080-0x2061)
byte(0x20df, 0x2100-0x20df)

unused(0x24f7)
i = 1
while i < len(addrs):
    length = addrs[i] - addrs[i-1]
    if length > 0:
        byte(addrs[i-1], length)
    i=i+1
for i in range(0x2228, 0x2228+8):
    inkey_key = get_u8_binary(i)
    constant(inkey_key, acorn.inkey_enum[inkey_key])
    expr(i, acorn.inkey_enum)
    byte(i)

j = 0
k = 0
for i in range(0, 130):
    addr = 0x4cf4 + 2*i
    level_addr = get_u8_binary(addr) + 256*get_u8_binary(addr + 1)

    word(0x4cf4 + 2*i)
    if (i % 10) == 0:
        label(0x4cf4 + 2*i, "data_set_"+ str(j))
        j += 1
        k = 0

    if level_addr != 0:
        name = "data_" + str(j) + "_"+str(k)
        label(level_addr, name)
        expr(addr, name)
        k += 1

constant(20, "total_caves")
constant(0xac, "opcode_ldy_abs")
constant(0xb9, "opcode_lda_abs_y")

label(0x0046, "data_set_ptr_low")
label(0x0047, "data_set_ptr_high")
label(0x005c, "sub_second_ticks")
label(0x0069, "status_text_address_low")
label(0x0073, "grid_x")
label(0x0077, "loop_counter")
label(0x0080, "screen_addr2_low")
label(0x0081, "screen_addr2_high")
label(0x0082, "next_ptr_low")
label(0x0083, "next_ptr_high")

label(0x0085, "tile_map_ptr_low")
label(0x0086, "tile_map_ptr_high")

label(0x0087, "cave_number")
label(0x0089, "difficulty_level")
label(0x008a, "screen_addr1_low")
label(0x008b, "screen_addr1_high")
label(0x008c, "ptr_low")
label(0x008d, "ptr_high")
label(0x008f, "offset_to_sound")

label(0x0c00, "grid_of_screen_sprites")

label(0x1300, "initial_clock_value")

label(0x1e70, "set_clock_value")
unused(0x1ee0)
blank(0x1ee0)

blank(0x1f32)
string(0x1f56, 1)
blank(0x1f5a)

label(0x2000, "sprite_addresses_low")
label(0x2080, "sprite_addresses_high")
unused(0x20df)

label(0x2228, "inkey_keys_table")
blank(0x2230)
unused(0x2230)
label(0x2238, "increment_ptr_and_clear_carry")
label(0x223e, "skip_increment")
label(0x2240, "add_a_to_ptr")
label(0x2249, "return1")
expr(0x2257, make_lo("special_cave_2"))
expr(0x225b, make_hi("special_cave_2"))
label(0x229e, "clear_backwards_status_bar_loop")
unused(0x22a5)
entry(0x22a5)
unused(0x22b1)
expr(0x22b4, make_lo("special_cave_1"))
expr(0x22b8, make_hi("special_cave_1"))
unused(0x22f9)
entry(0x22f9)
unused(0x22ff)
entry(0x22ff)

label(0x2300, "draw_grid_of_sprites")
expr(0x230d, "opcode_lda_abs_y")
expr(0x2312, make_lo("grid_of_screen_sprites"))
expr(0x231a, make_hi("grid_of_screen_sprites"))
ab(0x2323)
blank(0x2325)
expr(0x2326, make_lo("start_of_screen"))
expr(0x2328, make_hi("start_of_screen"))
expr(0x232c, make_hi("backwards_status_bar"))
expr(0x232e, make_lo("backwards_status_bar"))
expr(0x233c, make_hi("tile_map"))
expr(0x2340, "opcode_ldy_abs")
expr(0x2345, make_lo("players_and_men_status_bar"))
label(0x234c, "draw_grid_loop")
label(0x2350, "grid_draw_row_loop")
label(0x2357, "opcode_to_change")
label(0x235c, "start_of_grid_addr1_low")
label(0x235d, "start_of_grid_addr1_high")
label(0x2361, "start_of_grid_addr2_low")
label(0x2362, "start_of_grid_addr2_high")
comment(0x2375, "Each sprite is two character rows tall. screen_addr2_low/high is the destination screen address for the second character row of the sprite", indent=1)
comment(0x2381, "This next loop draws a single sprite in the grid.\nIt draws two character rows at the same time, with 16 bytes in each row.", indent=1)
label(0x2383, "draw_sprite_loop")
label(0x23a9, "skip_draw_sprite")
decimal(0x23b9)
label(0x23db, "return2")
unused(0x23dc)
unused_entry(0x23e8)
unused_entry(0x23f0)
unused(0x23f0)
entry(0x23f9)
unused(0x23fe)

expr(0x240e, make_hi("special_cave_1"))
expr(0x2412, make_lo("special_cave_1"))

ri(0x2509)
entry(0x2598)
label(0x25f5, "return3")
unused_entry(0x25f6)
unused_entry(0x25fc)

unused_entry(0x2600)
unused(0x2609)
unused(0x260e)
unused(0x2616)
unused(0x2618)
unused(0x2626)
unused(0x262b)
unused(0x2636)
unused(0x2667)
unused(0x2674)
unused(0x2678)
blank(0x2689)
label(0x2691, "read_keys_loop")
unused_entry(0x26ad)
unused(0x26c3)
unused(0x26cd)
unused(0x26d7)
unused(0x26da)
entry(0x26df)
unused(0x26fd)

comment(0x2777, "decrement time remaining", indent=1)
label(0x27ef, "return4")

unused(0x288a)
label(0x2898, "increment_status_bar_number")
expr(0x28a3, "sprite_0")
expr(0x28b1, "sprite_0")
label(0x28c0, "add_a_to_status_bar_number_at_y")
label(0x28aa, "decrement_status_bar_number")

label(0x2900, "prepare_level")
expr(0x2920, "total_caves")
expr(0x2930, make_lo("data_sets"))
expr(0x2934, make_hi("data_sets"))
expr(0x293b, "total_caves")
expr(0x2983, make_lo("special_cave_0"))
expr(0x2987, make_hi("special_cave_0"))
nonentry(0x299a)
nonentry(0x299c)
unused(0x299c)
label(0x29ac, "set_palette")
label(0x29b0, "set_palette_loop")
unused_entry(0x29c3)
label(0x29d4, "return5")
unused_entry(0x29d5)
unused(0x29e0)

label(0x2a00, "increment_ptr")
label(0x2a19, "return6")
expr(0x2a1b, make_lo("special_cave_3"))
expr(0x2a1f, make_hi("special_cave_3"))
label(0x2a29, "palette_block")
label(0x2a35, "set_palette_colour_ax")
label(0x2a4d, "reset_clock")
expr(0x2a7d, "sprite_0")
expr(0x2a8f, "sprite_0")
label(0x2ab4, "return7")
label(0x2af3, "return8")
unused(0x2af4)
ab(0x2ad2)
blank(0x2ad4)
ab(0x2ae9)
blank(0x2aea)

unused(0x2b85)
unused(0x2bc0)

unused(0x2cf0)
label(0x2cef, "return9")

label(0x2d44, "return10")
unused(0x2d45)
expr(0x2d51, make_lo("special_cave_2"))
unused(0x2d81)
unused_entry(0x2dbf)
ab(0x2dd1)
blank(0x2dd3)
unused(0x2dd3)
nonentry(0x2dd3)
byte(0x2de9, 3)

expr(0x2e80, "sprite_0")
expr(0x2e93, "sprite_1")
unused(0x2ee4)

expr(0x2f0a, "sprite_0")
expr(0x2f15, "sprite_0")
expr(0x2f34, "sprite_0")
label(0x2f47, "return11")
unused(0x2f48)
expr(0x2f77, "sprite_0")
unused(0x2fdd)

expr(0x301b, "sprite_0")
label(0x302b, "return12")
unused(0x302c)
label(0x30dc, "return13")
unused(0x30ec)

entry(0x31c0, "entry_point")
expr(0x31cc, "sprite_0")
unused(0x31e7)

label(0x3200, "tile_map")
blank(0x3200)
label(0x3200, "status_bar_sprite_numbers")
label(0x3201, "required_diamonds_on_status_bar")
label(0x3203, "total_diamonds_on_status_bar_high_digit")
label(0x3204, "total_diamonds_on_status_bar_low_digit")
label(0x320e, "score_on_status_bar")
label(0x3211, "hundreds_digit_of_score_on_status_bar")
blank(0x3214)
label(0x3214, "players_and_men_status_bar")
label(0x321b, "player_number_on_status_bar")
label(0x321e, "men_number_on_status_bar")
label(0x3225, "cave_letter_on_status_bar")
label(0x3227, "difficulty_level_on_status_bar")
blank(0x3228)
string(0x3225, 1)
blank(0x323c)
expr(0x324d, "'B'")
blank(0x3250)
blank(0x3264)
string(0x3264, 1)
string(0x3266, 1)
string(0x3268, 1)
string(0x326a, 1)
string(0x326c, 1)
string(0x3271, 1)
string(0x3273, 1)
string(0x3275, 1)
string(0x3277, 1)
blank(0x3278)
label(0x3278, "number_of_players_status_bar")
label(0x3280, "plural_for_player")
label(0x3289, "cave_letter")
string(0x3289, 1)
label(0x328b, "number_of_players_status_bar_difficulty_level")
string(0x32b4, 1)
string(0x32b6, 1)
string(0x32b8, 1)
string(0x32bb, 1)
string(0x32bd, 1)
string(0x32c1, 1)
string(0x32c3, 1)
string(0x32c5, 1)
string(0x32c7, 1)
string(0x32c8, 3)
string(0x32d3, 2)
label(0x3264, "bonus_life_text")
blank(0x328c)
label(0x328c, "game_over_text")
label(0x32dc, "highscore_last_status_bar")
label(0x32a0, "scrolling_pause_text")
label(0x32f0, "zeroed_status_bar")
label(0x329e, "player_number_on_game_over_text")

#expr(0x2ab1, make_lo("players_and_men_status_bar"))
expr(0x3a0d, make_lo("highscore_last_status_bar"))
#expr(0x2345, make_lo("players_and_men_status_bar"))
label(0x3250, "highscore_high_status_bar")
expr(0x3a1b, make_lo("highscore_high_status_bar"))

blank(0x3300)
comment(0x3300, """
Basic program for debugging purposes. Starts the game.

10*KEY 1 MO.4|M PAGE=13056 |M|N
20 MODE 5
30 VDU 23;8202;0;0;0;       (turns off the cursor)
40 *FX 178,0,0              (disables keyboard interrupts)
50 CALL 12736               (start the code at the regular entry_point)
60 *FX 178,255,0            (enables keyboard interrupts)
""")

blank(0x336c)
comment(0x336c, """
A fragment of the original source code (unused).

80 JSR 10829
90 JSR 8850:LDA #220:STA 105
100 LDA #123:LDY #0:JSR 9001
110 JSR 8850:LDA #80:STA 105
120 LDA #125:LDY #128:JSR 9001
130 JSR 8850:LDX

Note the unusual lack of hex literals, everything's decimal.

Translating this to hex form, we see this is the code at &3a06
80 JSR &2A4D
90 JSR &2292:LDA #&DC:STA &69
100 LDA #&7B:LDY #0:JSR &2329
110 JSR &2292:LDA #&50:STA &69
120 LDA #&7D:LDY #&80:JSR &2329
130 JSR &2292:LDX
""")

unused(0x336c)
byte(0x336c, 2)

blank(0x3400)

expr(0x3a37, "'A'")
expr(0x3a3d, "sprite_0")
expr(0x3a3e, "sprite_0")
expr(0x3a46, make_lo("number_of_players_status_bar"))
expr(0x3a83, "sprite_0")
expr(0x3aca, "'S'")
label(0x3ae1, "return14")
unused(0x3ae2)

expr(0x3b0f, "sprite_2")
expr(0x3b19, "sprite_0")
expr(0x3b33, "sprite_0")
expr(0x3b71, "sprite_0")
expr(0x3b91, "sprite_0")
expr(0x3b92, "sprite_0")
expr(0x3bc3, "'A'")
expr(0x3bc9, "sprite_0")
label(0x3bcc, "return15")

label(0x4700, "special_cave_0")

label(0x4b00, "required_diamonds_for_each_cave")
label(0x4b14, "time_limit_for_each_cave")
for i in range(20):
    decimal(0x4b14+i)

label(0x4ca4, "colour_one_for_each_cave")
label(0x4ca4+20*1, "colour_two_for_each_cave")
label(0x4ca4+20*2, "colour_three_for_each_cave")
label(0x4ca4+20*3, "cave_to_data_set")
byte(0x4ca4, 20)
byte(0x4ca4+20*1, 20)
byte(0x4ca4+20*2, 20)
byte(0x4ca4+20*3, 20)
label(0x4cf4, "data_sets")

label(0x5000, "special_cave_1")
byte(0x5000, 10)
byte(0x5000+10, 10)
byte(0x5000+20, 10)
byte(0x5000+30, 10)
label(0x5028, "backwards_status_bar")
label(0x503f, "special_cave_2")
label(0x5040, "special_cave_3")
byte(0x5040, 10)
byte(0x5040+10, 10)
byte(0x5040+20, 10)
byte(0x5040+30, 10)
label(0x5068, "default_status_bar")
string(0x5079, 1)
byte(0x507c, 10)
byte(0x507c+10, 10)
byte(0x507c+20, 10)
byte(0x507c+30, 10)
byte(0x507c+40, 10)
byte(0x507c+50, 10)
byte(0x507c+60, 10)
byte(0x507c+70, 10)
byte(0x507c+80, 10)
byte(0x507c+90, 10)
byte(0x507c+100, 10)
byte(0x507c+110, 10)
byte(0x507c+120, 10)
byte(0x507c+130, 10)
byte(0x507c+140, 10)
byte(0x507c+150, 10)
byte(0x507c+160, 10)

label(0x5128, "unused_fragment_of_basic1")
byte(0x512c, 4)
blank(0x5140)
byte(0x5140, 4)
byte(0x5144, 10)
byte(0x5144+10, 10)
byte(0x5144+20, 10)
label(0x5168, "unused_fragment_of_basic2")
byte(0x517b, 5)
blank(0x5180)

label(0x5400, "credits")

entry(0x5568)
unused(0x557b)
acorn.sound(0x56b8, "sound1")
label(0x56bc, "sound1_pitch")
label(0x56be, "sound1_duration")
acorn.sound(0x56c0, "sound2")
acorn.sound(0x56c8, "sound3")

expr(0x5784, make_lo("sound1"))
expr(0x5787, make_hi("sound1"))

label(0x5bc0, "start_of_screen")

acorn.bbc()

print(""";
; File: ___1___
;
""")

go()
